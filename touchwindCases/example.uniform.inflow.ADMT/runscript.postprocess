#!/bin/bash

# User Input.
echo "   -Loading userinput..."
chmod u+rwx ./userinput.sh
source ./userinput.sh

# Specilized file Input.
precursor=0 					# Boolean for wehter or not the postprocessing will perform the actions to get 
								#   driving data for the turbine simulation
reconstruct=1					# Boolean for wehter or not to reconstruct decomposed solutions
delete=1						# Boolean for wheter to delete all processor files
createVTK=1						# Boolean for wehter or not the postprocessing will perform the actions to create 	
								#    VTK and zip
                           



if [ $reconstruct -eq 1 ]; then
    if [[ -d ./processor0 ]]; then
        echo "   -Reconstructing decomposed solution..."
        if [ $precursor -eq 1 ]; then 
            if [[ -d $startTime.initialconditions ]]; then
                rm -rf $startTime.initialconditions  
            fi
            rm -rf $startTime
            reconstructPar -time $startTime -fields '(k kappat nuSgs p_rgh qwall Rwall T U)' > log.reconstructPar.initialconditions 2>&1
            mv $startTime $startTime.initialconditions
        fi
        reconstructPar > log.reconstructPar 2>&1
    else
        echo "   -Reconstructing impossible, no decomposed directories..."
    fi
fi


if [ $delete -eq 1 ]; then	
	if [[ -d ./processor0 ]]; then
		echo "   -Deleting decomposed directories..."
		rm -r processor*
	else
		echo "   -No decomposed directories..."
	fi  
fi   
   

if [ $createVTK -eq 1 ]; then	   
	echo "   -Creating VTK to load into paraview..."
	foamToVTK > log.foamToVTK 2>&1

	foldername=${PWD##*/}
	foldername+="_vtk"
	cp -r VTK/ $foldername
	cp -r turbineOutput/ $foldername

	echo "   -Zip VTK folder to reduce download amount..."
	if [[ -f ./$foldername.zip ]]; then
		rm -rf $foldername.zip
	fi
	zip -r $foldername.zip $foldername/ > log.zipVTK 2>&1
	rm -rf $foldername/
fi

